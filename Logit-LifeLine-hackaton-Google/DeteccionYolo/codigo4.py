import cv2
import time
import requests
import json
import os
from datetime import datetime
from ultralytics import YOLO
import numpy as np

class FallDetector:
    def __init__(self, camera_id="CAM-007", direccion="Av. Siempre Viva 742", api_endpoint="http://your-api-endpoint.com/api/incidents"):
        # Configuraci√≥n
        self.camera_id = camera_id
        self.direccion = direccion
        self.api_endpoint = api_endpoint
        
        # Cargar modelos YOLO
        self.person_model = YOLO("yolov8n.pt")  # Modelo para detectar personas
        self.furniture_model = YOLO("yolov8n.pt")  # Puedes cambiar por tu modelo personalizado
        
        # IDs de clases de muebles en COCO dataset
        self.furniture_classes = {
            56: "chair",      # silla
            57: "couch",      # sof√°
            59: "bed",        # cama
            61: "dining_table"  # mesa (opcional)
        }
        
        # Variables para seguimiento de ca√≠das
        self.fall_detected = False
        self.fall_start_time = None
        self.fall_duration_threshold = 5.0  # 5 segundos
        self.notification_sent = False
        
        # SISTEMA DE MEMORIA DE MUEBLES (soluci√≥n a oclusi√≥n)
        self.furniture_memory = []  # Memoria persistente de muebles
        self.furniture_memory_timeout = 300  # 5 minutos sin detectar para olvidar mueble
        self.furniture_detection_interval = 60  # Buscar muebles cada 60 frames
        self.frame_count = 0
        
        # SISTEMA DE AN√ÅLISIS DE MOVIMIENTO
        self.prev_frame = None
        self.movement_threshold = 1000  # Umbral de movimiento para considerar "ca√≠da s√∫bita"
        
        # SISTEMA DE ALTURA RELATIVA
        self.floor_reference = None  # Referencia del "suelo" para calcular alturas
        
        # Variables visuales
        self.zone_colors = [(255, 0, 255), (255, 255, 0), (0, 255, 255), (255, 128, 0)]
        self.show_zones = True
        self.show_debug = False  # Informaci√≥n de debug
        
        # Crear directorio para im√°genes si no existe
        self.image_dir = "fall_incidents"
        os.makedirs(self.image_dir, exist_ok=True)
        
        # Captura de video
        self.cap = cv2.VideoCapture(0)
        
        print("\nüè† DETECTOR DE CA√çDAS CON ANTI-OCLUSI√ìN")
        print("‚Ä¢ Sistema de memoria de muebles (persisten aunque se oculten)")
        print("‚Ä¢ An√°lisis de movimiento s√∫bito para detectar ca√≠das reales")
        print("‚Ä¢ An√°lisis de altura relativa del suelo")
        print("‚Ä¢ Presiona 'F' para forzar escaneo de muebles")
        print("‚Ä¢ Presiona 'T' para alternar visualizaci√≥n de zonas")
        print("‚Ä¢ Presiona 'D' para alternar modo debug")
        print("‚Ä¢ Presiona 'R' para resetear memoria de muebles")
        print("‚Ä¢ Presiona ESC para salir\n")
    
    def update_furniture_memory(self, frame):
        """Actualiza la memoria persistente de muebles"""
        results = self.furniture_model(frame)[0]
        current_time = time.time()
        
        # Detectar muebles actuales
        current_furniture = []
        for r in results.boxes:
            cls_id = int(r.cls[0])
            conf = float(r.conf[0])
            
            if cls_id in self.furniture_classes and conf > 0.4:  # Confianza m√°s baja para capturar muebles parcialmente ocultos
                x1, y1, x2, y2 = map(int, r.xyxy[0])
                
                furniture_info = {
                    'bbox': (x1, y1, x2, y2),
                    'class': self.furniture_classes[cls_id],
                    'confidence': conf,
                    'class_id': cls_id,
                    'last_seen': current_time,
                    'detection_count': 1
                }
                current_furniture.append(furniture_info)
        
        # Actualizar memoria: fusionar detecciones actuales con memoria
        for current in current_furniture:
            cx1, cy1, cx2, cy2 = current['bbox']
            current_center = ((cx1 + cx2) // 2, (cy1 + cy2) // 2)
            
            # Buscar si este mueble ya existe en memoria (cerca de la misma posici√≥n)
            merged = False
            for memory_item in self.furniture_memory:
                mx1, my1, mx2, my2 = memory_item['bbox']
                memory_center = ((mx1 + mx2) // 2, (my1 + my2) // 2)
                
                # Calcular distancia entre centros
                distance = np.sqrt((current_center[0] - memory_center[0])**2 + 
                                 (current_center[1] - memory_center[1])**2)
                
                # Si est√°n cerca y son del mismo tipo, actualizar
                if distance < 100 and current['class'] == memory_item['class']:
                    # Actualizar informaci√≥n (promedio ponderado para suavizar)
                    weight = 0.3  # Peso de la nueva detecci√≥n
                    memory_item['bbox'] = (
                        int(mx1 * (1-weight) + cx1 * weight),
                        int(my1 * (1-weight) + cy1 * weight),
                        int(mx2 * (1-weight) + cx2 * weight),
                        int(my2 * (1-weight) + cy2 * weight)
                    )
                    memory_item['confidence'] = max(memory_item['confidence'], current['confidence'])
                    memory_item['last_seen'] = current_time
                    memory_item['detection_count'] += 1
                    merged = True
                    break
            
            # Si no se pudo fusionar, agregar como nuevo
            if not merged:
                self.furniture_memory.append(current)
        
        # Limpiar muebles que no se han visto en mucho tiempo
        self.furniture_memory = [
            item for item in self.furniture_memory 
            if current_time - item['last_seen'] < self.furniture_memory_timeout
        ]
        
        if self.show_debug:
            print(f"üè† Memoria de muebles: {len(self.furniture_memory)} items")
    
    def analyze_movement_pattern(self, frame):
        """Analiza el patr√≥n de movimiento para detectar ca√≠das s√∫bitas vs movimientos normales"""
        if self.prev_frame is None:
            self.prev_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            return False
        
        current_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # Calcular diferencia de frames
        frame_diff = cv2.absdiff(self.prev_frame, current_gray)
        
        # Detectar movimiento significativo
        movement_score = np.sum(frame_diff > 30)  # P√≠xeles que cambiaron significativamente
        
        self.prev_frame = current_gray
        
        # Movimiento s√∫bito indica posible ca√≠da real
        sudden_movement = movement_score > self.movement_threshold
        
        if self.show_debug and sudden_movement:
            print(f"‚ö° Movimiento s√∫bito detectado: {movement_score}")
        
        return sudden_movement
    
    def calculate_person_height_position(self, person_bbox, frame_height):
        """Calcula la posici√≥n vertical relativa de la persona"""
        x1, y1, x2, y2 = person_bbox
        
        # Calcular posici√≥n del centro vertical
        center_y = (y1 + y2) // 2
        
        # Posici√≥n relativa desde el suelo (0 = suelo, 1 = techo)
        relative_height = 1.0 - (center_y / frame_height)
        
        # Altura de la persona en p√≠xeles
        person_height = y2 - y1
        
        return relative_height, person_height
    
    def is_in_furniture_zone_advanced(self, person_bbox, frame):
        """Verificaci√≥n avanzada considerando memoria de muebles y an√°lisis contextual"""
        px1, py1, px2, py2 = person_bbox
        person_center_x = (px1 + px2) // 2
        person_center_y = (py1 + py2) // 2
        person_area = (px2 - px1) * (py2 - py1)
        
        # Calcular altura relativa
        relative_height, person_height = self.calculate_person_height_position(person_bbox, frame.shape[0])
        
        for furniture in self.furniture_memory:
            fx1, fy1, fx2, fy2 = furniture['bbox']
            
            # Expandir zona de mueble seg√∫n su tipo y confianza
            margin = 30 if furniture['class'] in ['couch', 'bed'] else 15
            
            # Zona expandida para considerar alrededores del mueble
            expanded_zone = (
                max(0, fx1 - margin),
                max(0, fy1 - margin),
                min(frame.shape[1], fx2 + margin),
                min(frame.shape[0], fy2 + margin)
            )
            
            ex1, ey1, ex2, ey2 = expanded_zone
            
            # Verificar si la persona est√° en la zona expandida
            center_in_expanded = (ex1 <= person_center_x <= ex2 and ey1 <= person_center_y <= ey2)
            
            # Calcular superposici√≥n con zona original
            overlap_x1 = max(px1, fx1)
            overlap_y1 = max(py1, fy1)
            overlap_x2 = min(px2, fx2)
            overlap_y2 = min(py2, fy2)
            
            overlap_area = 0
            if overlap_x1 < overlap_x2 and overlap_y1 < overlap_y2:
                overlap_area = (overlap_x2 - overlap_x1) * (overlap_y2 - overlap_y1)
            
            overlap_ratio = overlap_area / person_area if person_area > 0 else 0
            
            # L√ìGICA MEJORADA DE DECISI√ìN:
            # 1. Si hay superposici√≥n significativa con el mueble original
            # 2. O si est√° en zona expandida de cama/sof√° Y est√° a altura apropiada
            # 3. Considerar hist√≥rico de detecciones del mueble
            
            confidence_factor = min(furniture['detection_count'] / 10, 1.0)  # M√°s confianza = m√°s detecciones
            
            is_rest_furniture = furniture['class'] in ['couch', 'bed']
            appropriate_height = relative_height < 0.6  # Est√° en la parte baja de la imagen
            
            # Condiciones para considerar que est√° en zona de descanso
            if (overlap_ratio > 0.2 or 
                (center_in_expanded and is_rest_furniture and appropriate_height and confidence_factor > 0.3)):
                
                if self.show_debug:
                    print(f"üõèÔ∏è  En zona de {furniture['class']}: overlap={overlap_ratio:.2f}, "
                          f"altura={relative_height:.2f}, confianza={confidence_factor:.2f}")
                
                return True, furniture['class'], confidence_factor
        
        return False, None, 0
    
    def draw_furniture_zones(self, frame):
        """Dibuja las zonas de muebles de la memoria"""
        if not self.show_zones:
            return frame
            
        overlay = frame.copy()
        current_time = time.time()
        
        for i, furniture in enumerate(self.furniture_memory):
            x1, y1, x2, y2 = furniture['bbox']
            color = self.zone_colors[i % len(self.zone_colors)]
            
            # Intensidad basada en cu√°ndo se vio por √∫ltima vez
            time_since_seen = current_time - furniture['last_seen']
            alpha_factor = max(0.3, 1.0 - (time_since_seen / 60))  # Se desvanece en 1 minuto
            
            # Zona expandida para visualizaci√≥n
            margin = 30 if furniture['class'] in ['couch', 'bed'] else 15
            ex1 = max(0, x1 - margin)
            ey1 = max(0, y1 - margin)
            ex2 = min(frame.shape[1], x2 + margin)
            ey2 = min(frame.shape[0], y2 + margin)
            
            # Dibujar zona expandida (m√°s transparente)
            cv2.rectangle(overlay, (ex1, ey1), (ex2, ey2), color, -1)
            
            # Dibujar zona original (menos transparente)
            cv2.rectangle(overlay, (x1, y1), (x2, y2), color, -1)
            
            # Contorno
            line_thickness = 3 if time_since_seen < 5 else 1
            cv2.rectangle(frame, (x1, y1), (x2, y2), color, line_thickness)
            
            # Etiqueta con informaci√≥n
            age_indicator = "üü¢" if time_since_seen < 5 else "üü°" if time_since_seen < 30 else "üî¥"
            label = f"{age_indicator} {furniture['class'].upper()}"
            if self.show_debug:
                label += f" ({furniture['detection_count']}x)"
            
            label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)[0]
            cv2.rectangle(frame, (x1, y1 - label_size[1] - 10), 
                         (x1 + label_size[0] + 10, y1), color, -1)
            cv2.putText(frame, label, (x1 + 5, y1 - 5), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)
        
        # Mezclar overlay
        alpha = 0.15
        cv2.addWeighted(overlay, alpha, frame, 1 - alpha, 0, frame)
        
        return frame
    
    def detect_fall_advanced(self, frame):
        """Detecci√≥n avanzada de ca√≠das con an√°lisis contextual"""
        results = self.person_model(frame)[0]
        
        current_fall_detected = False
        sudden_movement = self.analyze_movement_pattern(frame)
        
        for r in results.boxes:
            cls_id = int(r.cls[0])
            conf = float(r.conf[0])
            
            if cls_id != 0 or conf < 0.5:
                continue
            
            x1, y1, x2, y2 = map(int, r.xyxy[0])
            w = x2 - x1
            h = y2 - y1
            
            # An√°lisis de postura
            aspect_ratio = w / h if h > 0 else 0
            is_horizontal = aspect_ratio > 1.2
            
            # Verificar zona de muebles con l√≥gica avanzada
            in_furniture_zone, furniture_type, zone_confidence = self.is_in_furniture_zone_advanced((x1, y1, x2, y2), frame)
            
            # Calcular altura relativa
            relative_height, person_height = self.calculate_person_height_position((x1, y1, x2, y2), frame.shape[0])
            
            # L√ìGICA DE DECISI√ìN MEJORADA
            if is_horizontal and not in_furniture_zone:
                # Persona horizontal fuera de muebles
                if sudden_movement or relative_height < 0.3:  # Movimiento s√∫bito O muy cerca del suelo
                    current_fall_detected = True
                    color = (0, 0, 255)  # Rojo - ca√≠da real
                    label = f"üö® CA√çDA REAL ({conf:.2f})"
                else:
                    # Podr√≠a ser falso positivo, pero mantener vigilancia
                    color = (0, 165, 255)  # Naranja - sospechoso
                    label = f"‚ö†Ô∏è Posible ca√≠da ({conf:.2f})"
                    
            elif is_horizontal and in_furniture_zone and zone_confidence > 0.5:
                # Persona en mueble con alta confianza
                color = (0, 255, 255)  # Cian - descansando
                label = f"üõèÔ∏è En {furniture_type} ({conf:.2f})"
                
            elif is_horizontal and in_furniture_zone and zone_confidence <= 0.5:
                # Zona de mueble con baja confianza (podr√≠a estar oculto)
                if sudden_movement:
                    current_fall_detected = True
                    color = (128, 0, 255)  # Morado - ca√≠da cerca de mueble
                    label = f"üö® Ca√≠da cerca de {furniture_type} ({conf:.2f})"
                else:
                    color = (255, 165, 0)  # Naranja - incierto
                    label = f"‚ùì Incierto cerca de {furniture_type} ({conf:.2f})"
            else:
                # Persona de pie
                color = (0, 255, 0)
                label = f"üö∂ De pie ({conf:.2f})"
            
            # Dibujar detecci√≥n
            cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
            
            # Etiqueta con fondo
            label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.6, 2)[0]
            cv2.rectangle(frame, (x1, y1 - label_size[1] - 10), 
                         (x1 + label_size[0] + 5, y1), color, -1)
            cv2.putText(frame, label, (x1, y1 - 5), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            
            # Info de debug
            if self.show_debug:
                debug_info = f"H:{relative_height:.2f} AR:{aspect_ratio:.2f}"
                cv2.putText(frame, debug_info, (x1, y2 + 20), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.4, color, 1)
        
        return current_fall_detected
    
    def save_incident_image(self, frame):
        """Guarda la imagen del incidente con timestamp"""
        timestamp = datetime.now()
        filename = f"incidente_{timestamp.strftime('%Y%m%d_%H%M%S')}.jpg"
        filepath = os.path.join(self.image_dir, filename)
        
        cv2.imwrite(filepath, frame)
        return filename, filepath
    
    def send_notification(self, frame):
        """Env√≠a notificaci√≥n POST cuando se detecta ca√≠da sostenida"""
        try:
            filename, filepath = self.save_incident_image(frame)
            now = datetime.now()
            
            print(f"üö® CA√çDA CONFIRMADA - Enviando notificaci√≥n...")
            print(f"Archivo: {filepath}")
            
            form_data = {
                'echa': now.strftime("%d/%m/%Y"),
                'hora': now.strftime("%H:%M:%S"),
                'direccion': self.direccion,
                'idCamara': self.camera_id,
            }
            
            with open(filepath, 'rb') as image_file:
                files = {'imagen': (filename, image_file, 'image/jpeg')}
                response = requests.post(self.api_endpoint, data=form_data, files=files, timeout=30)
            
            if response.status_code == 200:
                print("‚úÖ Notificaci√≥n enviada exitosamente")
                return True
            else:
                print(f"‚ùå Error al enviar notificaci√≥n: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error al enviar notificaci√≥n: {e}")
            return False
    
    def update_fall_status(self, current_fall_detected, frame):
        """Actualiza el estado de la ca√≠da y maneja las notificaciones"""
        current_time = time.time()
        
        if current_fall_detected:
            if not self.fall_detected:
                self.fall_detected = True
                self.fall_start_time = current_time
                self.notification_sent = False
                print("‚ö†Ô∏è  Ca√≠da detectada - Iniciando verificaci√≥n...")
            
            elif self.fall_start_time:
                elapsed_time = current_time - self.fall_start_time
                
                if elapsed_time >= self.fall_duration_threshold and not self.notification_sent:
                    print(f"üö® Ca√≠da confirmada despu√©s de {elapsed_time:.1f} segundos!")
                    self.send_notification(frame)
                    self.notification_sent = True
        else:
            if self.fall_detected:
                elapsed_time = current_time - self.fall_start_time if self.fall_start_time else 0
                print(f"‚úÖ Falsa alarma o recuperaci√≥n despu√©s de {elapsed_time:.1f} segundos")
                
                self.fall_detected = False
                self.fall_start_time = None
                self.notification_sent = False
    
    def run(self):
        """Ejecuta el detector principal"""
        print("üîç Iniciando detector de ca√≠das avanzado...")
        
        while True:
            ret, frame = self.cap.read()
            if not ret:
                print("‚ùå Error al leer frame de la c√°mara")
                break
            
            self.frame_count += 1
            
            # Actualizar memoria de muebles peri√≥dicamente
            if self.frame_count % self.furniture_detection_interval == 0:
                self.update_furniture_memory(frame)
            
            # Detectar ca√≠das con l√≥gica avanzada
            current_fall_detected = self.detect_fall_advanced(frame)
            
            # Actualizar estado
            self.update_fall_status(current_fall_detected, frame)
            
            # Dibujar zonas
            frame = self.draw_furniture_zones(frame)
            
            # Estado del sistema
            status_text = "üü¢ SISTEMA ACTIVO"
            status_color = (0, 255, 0)
            
            if self.fall_detected:
                if self.fall_start_time:
                    elapsed = time.time() - self.fall_start_time
                    status_text = f"üî¥ VERIFICANDO CA√çDA - {elapsed:.1f}s"
                    status_color = (0, 165, 255) if elapsed < self.fall_duration_threshold else (0, 0, 255)
            
            # Mostrar estado
            status_size = cv2.getTextSize(status_text, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2)[0]
            cv2.rectangle(frame, (5, 5), (status_size[0] + 15, status_size[1] + 15), (0, 0, 0), -1)
            cv2.putText(frame, status_text, (10, 25), cv2.FONT_HERSHEY_SIMPLEX, 0.7, status_color, 2)
            
            # Info de memoria
            memory_info = f"üè† Muebles en memoria: {len(self.furniture_memory)}"
            cv2.putText(frame, memory_info, (10, 55), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            
            cv2.imshow("Detector de Ca√≠das - YOLOv8", frame)
            
            # Manejar teclas
            key = cv2.waitKey(1) & 0xFF
            if key == 27:  # ESC
                break
            elif key == ord('f') or key == ord('F'):
                print("üîÑ Escaneando muebles...")
                self.update_furniture_memory(frame)
            elif key == ord('t') or key == ord('T'):
                self.show_zones = not self.show_zones
                print(f"üëÅÔ∏è  Zonas: {'Visible' if self.show_zones else 'Oculto'}")
            elif key == ord('d') or key == ord('D'):
                self.show_debug = not self.show_debug
                print(f"üêõ Debug: {'Activado' if self.show_debug else 'Desactivado'}")
            elif key == ord('r') or key == ord('R'):
                self.furniture_memory = []
                print("üóëÔ∏è  Memoria de muebles reseteada")
        
        self.cleanup()
    
    def cleanup(self):
        """Limpia recursos"""
        self.cap.release()
        cv2.destroyAllWindows()
        print("üîö Detector detenido")

# Uso del detector
if __name__ == "__main__":
    detector = FallDetector(
        camera_id="CAM-007",
        direccion="Av. Siempre Viva 742",
        api_endpoint="http://192.168.43.11:8000/webhook"
    )
    
    try:
        detector.run()
    except KeyboardInterrupt:
        print("\nüõë Detenido por el usuario")
        detector.cleanup()